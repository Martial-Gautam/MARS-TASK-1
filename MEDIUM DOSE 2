#include <iostream>
#include <string>
#include <vector>

using namespace std;


class Person {
private:
    std::string name;
    int level;

public:

    Person(const std::string& name, int level) : name(name), level(level) {}


    std::string getName() const {
        return name;
    }


    int getLevel() const {
        return level;
    }

    void setLevel(int newLevel) {
        level = newLevel;
    }
};


class hierarchy {
private:
    std::vector<Person> people;

public:
    // Function to insert a person to the hierarchy
    void addPerson(const Person& person) {
        people.push_back(person);
    }

    // Function for communication
    void communicate(const std::string& sender, const std::string& receiver) {
        Person* senderPtr = nullptr;
        Person* receiverPtr = nullptr;


        for (auto& person : people) {
            if (person.getName() == sender) {
                senderPtr = &person;
            }
            if (person.getName() == receiver) {
                receiverPtr = &person;
            }
        }


        if (senderPtr && receiverPtr) {
            std::cout << sender << " communicates with " << receiver << " successfully." << std::endl;
        } else {
            std::cout << "Person not found." << std::endl;
        }
    }
};

int main() {

    hierarchy mars;
    string name1,name2,name3;

    cout<<"Enter the Name :";
    cin>>name1;

    cout<<"Enter the Name :";
    cin>>name2;

    cout<<"Enter the Name :";
    cin>>name3;
    mars.addPerson(Person(name1, 3));
    mars.addPerson(Person(name2, 2));
    mars.addPerson(Person(name3, 1));


    mars.communicate(name1, name3);
    mars.communicate(name1, name2);

    return 0;
}
